(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{80:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return r})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t(3),i=t(7),c=(t(0),t(96)),o={title:"Migration guide"},r={unversionedId:"js/migration_guide",id:"js/migration_guide",isDocsHomePage:!1,title:"Migration guide",description:"Migration Guide 2.0",source:"@site/docs/js/migration_guide.md",slug:"/js/migration_guide",permalink:"/docs/js/migration_guide",editUrl:"https://github.com/archimedes-projects/archimedes-docs/edit/main/docs/js/migration_guide.md",version:"current",sidebar:"js",previous:{title:"Components",permalink:"/docs/js/components"}},s=[{value:"Migration Guide 2.0",id:"migration-guide-20",children:[{value:"Change <code>@EvictCache</code> decorator to <code>@InvalidateCache</code>",id:"change-evictcache-decorator-to-invalidatecache",children:[]},{value:"Links are async now",id:"links-are-async-now",children:[]},{value:"Options to CacheManager and NotificationCenter",id:"options-to-cachemanager-and-notificationcenter",children:[]},{value:"Runner is deprecated",id:"runner-is-deprecated",children:[]}]}],d={toc:s};function p(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"migration-guide-20"},"Migration Guide 2.0"),Object(c.b)("hr",null),Object(c.b)("h3",{id:"change-evictcache-decorator-to-invalidatecache"},"Change ",Object(c.b)("inlineCode",{parentName:"h3"},"@EvictCache")," decorator to ",Object(c.b)("inlineCode",{parentName:"h3"},"@InvalidateCache")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript"},"@InvalidateCache\nexport class FooQry extends Query<number> {}\n")),Object(c.b)("h3",{id:"links-are-async-now"},"Links are async now"),Object(c.b)("p",null,"If you have any custom link you should change your ",Object(c.b)("inlineCode",{parentName:"p"},"next")," method to return a Promise now."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"BEFORE")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript"},"import { BaseLink } from '@archimedes/arch'\n\nexport class CustomLink extends BaseLink {\n  next(context: Context): void {\n    [...]\n    this.nextLink.next(context)\n  }\n}\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"AFTER")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript"},"import { BaseLink } from '@archimedes/arch'\n\nexport class CustomLink extends BaseLink {\n  async next(context: Context): Promise<void> {\n    [...]\n    await this.nextLink.next(context)\n  }\n}\n")),Object(c.b)("h3",{id:"options-to-cachemanager-and-notificationcenter"},"Options to CacheManager and NotificationCenter"),Object(c.b)("p",null,"Archimedes 2.0 adds options to CacheManager and NotificationCenter, so maybe you would need change the way to instance it."),Object(c.b)("p",null,"An example of Angular provider injection change:"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"BEFORE")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript"},"const ARCHIMEDES_PROVIDERS = [\n    { provide: CacheManager, useClass: CacheManager },\n    { provide: NotificationCenter, useClass: NotificationCenter }\n]\n")),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"AFTER")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript"},"const ARCHIMEDES_PROVIDERS = [\n    { provide: CacheManager, useFactory: () => new CacheManager() },\n    { provide: NotificationCenter, useFactory: () => new NotificationCenter() }\n]\n")),Object(c.b)("h3",{id:"runner-is-deprecated"},"Runner is deprecated"),Object(c.b)("p",null,"Now you should use Archimedes class to create the chain of responsibility:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-typescript"},"import { Archimedes, LoggerLink, ExecutorLink } from '@archimedes/arch'\n\nasync ngDoBootstrap(applicationRef: ApplicationRef) {\n    const loggerLink = this.injector.get(LoggerLink)\n    const executorLink = this.injector.get(ExecutorLink)\n    Archimedes.createChain([executorLink, loggerLink])\n}\n")),Object(c.b)("hr",null))}p.isMDXComponent=!0}}]);